name: Trigger Azure DevOps Build 

on:
  workflow_dispatch:
    inputs:
      orgName:
        description: 'Azure DevOps Organization Name'
        required: true
      projectName:
        description: 'Azure DevOps Project Name'
        required: true
      azurePipelineDefinitionId:
        description: 'Azure DevOps Pipeline Definition ID'
        required: true
      ResourceYamlFile:
        description: 'Select the resource YAML file'
        required: true
        type: choice
        options:
          - 'vm_provision.yaml'
          - 'webapp_provision.yaml'
      targetRepositoryName:
        description: 'Repository Name'
        required: true
      pipelineName:
        description: 'Pipeline Name'
        required: true

env:
  # Use the selected YAML file from the input
  RESOURCE_YAML: ${{ github.event.inputs.ResourceYamlFile }}

jobs:
  trigger-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Debugging step to print the Authorization Token (use cautiously in a secure environment)
      - name: Print Authorization Token
        run: |
          echo "Authorization token is used for the cURL request, but not printed for security reasons."

      # Debugging: Print the cURL request body being sent to Azure DevOps
      - name: Print cURL Request Body
        run: |
          echo "Request body being sent to Azure DevOps:"
          echo '{
            "definition": {
              "id": "${{ github.event.inputs.azurePipelineDefinitionId }}"
            },
            "sourceBranch": "refs/heads/main",
            "parameters": {
              "yamlFile": "${{ env.RESOURCE_YAML }}",
              "orgName": "${{ github.event.inputs.orgName }}",
              "projectName": "${{ github.event.inputs.projectName }}",
              "targetRepositoryName": "${{ github.event.inputs.targetRepositoryName }}",
              "pipelineName": "${{ github.event.inputs.pipelineName }}"
            }
          }'

      # Step 1: Trigger Azure DevOps Build via cURL
      - name: Trigger Azure DevOps Build
        run: |
          echo "Triggering Azure DevOps build with definition ID ${{ github.event.inputs.azurePipelineDefinitionId }} using YAML file ${{ env.RESOURCE_YAML }}..."
          
          response=$(curl --http1.1 -s -w "%{http_code}" -o response.json \
            -H "Authorization: Basic $(echo -n ":${{ secrets.AZURE_DEVOPS_TOKEN }}" | base64 | tr -d '\n')" \
            -H "Content-Type: application/json" \
            -d '{
                  "definition": {
                    "id": "${{ github.event.inputs.azurePipelineDefinitionId }}"
                  },
                  "sourceBranch": "refs/heads/main",
                  "parameters": {
                    "yamlFile": "${{ env.RESOURCE_YAML }}",
                    "orgName": "${{ github.event.inputs.orgName }}",
                    "projectName": "${{ github.event.inputs.projectName }}",
                    "targetRepositoryName": "${{ github.event.inputs.targetRepositoryName }}",
                    "pipelineName": "${{ github.event.inputs.pipelineName }}"
                  }
                }' \
            "https://dev.azure.com/${{ github.event.inputs.orgName }}/${{ github.event.inputs.projectName }}/_apis/build/builds?api-version=6.1-preview.6")

          # Check the response status and output the response content for debugging
          status_code=$(echo $response | tail -n 1)
          echo "Response Status Code: $status_code"
          if [[ "$status_code" -ne 200 && "$status_code" -ne 202 ]]; then
            echo "Error triggering Azure DevOps build. Status code: $status_code"
            cat response.json
            exit 1
          fi

      # Post-job cleanup (optional)
      - name: Post job cleanup
        run: |
          echo "Cleaning up after the build trigger..."
